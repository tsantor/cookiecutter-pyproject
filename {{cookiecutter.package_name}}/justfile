{% raw %}
# List all available commands
default:
  just --list

# -----------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------

package_name := "package_name"
package_version := "package_version"
aws_profile := "xstudios"
s3_bucket := "xstudios-pypi"
wheel_name := package_name + "-" + package_version + "-py3-none-any.whl"
package_url := "https://" + s3_bucket + ".s3.amazonaws.com/" + wheel_name

# START - Generic commands
# -----------------------------------------------------------------------------
# Environment
# -----------------------------------------------------------------------------

# Create virtual environment
env:
  uv venv --python 3.13.1

# Remove virtual environment
env_remove:
  rm -rf .venv

# Recreate environment from scratch
env_recreate: env_remove env pip_install_editable

# -----------------------------------------------------------------------------
# Pip
# -----------------------------------------------------------------------------

# Add dev dependencies
pip_add_dev_dependencies:
  uv add twine wheel build ruff pipdeptree pre-commit --group dev

# Add test dependencies
pip_add_test_dependencies:
  uv add pytest pytest-cov pytest-mock coverage --group test

# Install in editable mode
pip_install_editable:
  uv pip install -e .
  uv sync --all-groups
  pre-commit install

# Run pip list
pip_list:
  uv pip list

# Run uv pip tree
pip_tree:
  uv pip tree

# Run pipdeptree
pipdeptree:
  uv run pipdeptree

# Sync dependencies [production, dev, test]
uv_sync:
  uv sync --all-groups

# Check if lock file is up to date
uv_lock_check:
  uv lock --check

# -----------------------------------------------------------------------------
# Testing
# -----------------------------------------------------------------------------

# Run tests
pytest:
  uv run pytest -vx --cov --cov-report=html

# Run tests in verbose mode
pytest_verbose:
  uv run pytest -vvs --cov --cov-report=html

# Run tests with coverage
coverage:
  uv run coverage run -m pytest && coverage html

# Run tests with coverage in verbose mode
coverage_verbose:
  uv run coverage run -m pytest -vss && coverage html

# Run tests with coverage and skip covered
coverage_skip:
  uv run coverage run -m pytest -vs && coverage html --skip-covered

# Open coverage report
open_coverage:
  open htmlcov/index.html

# -----------------------------------------------------------------------------
# Ruff
# -----------------------------------------------------------------------------

# Run ruff format
ruff_format:
  uv run ruff format src/{{package_name}}

# Run ruff check
ruff_check:
  uv run ruff check src/{{package_name}}

# Run ruff clean
ruff_clean:
  uv run ruff clean

# -----------------------------------------------------------------------------
# Cleanup
# -----------------------------------------------------------------------------

# Remove build artifacts
clean_build:
  rm -fr build/ dist/ .eggs/
  find . -name '*.egg-info' -o -name '*.egg' -exec rm -fr {} +

# Remove python file artifacts
clean_pyc:
  find . \( -name '*.pyc' -o -name '*.pyo' -o -name '*~' -o -name '__pycache__' \) -exec rm -fr {} +

# Remove all build and python artifacts
clean: clean_build clean_pyc

# Clear pytest cache
clean_pytest_cache:
  rm -rf .pytest_cache

# Clear ruff cache
clean_ruff_cache:
  rm -rf .ruff_cache

# Clear tox cache
clean_tox_cache:
  rm -rf .tox

# Clear coverage cache
clean_coverage:
  rm .coverage
  rm -rf htmlcov

# Clear pytest, ruff, tox, and coverage caches
clean_tests: clean_pytest_cache clean_ruff_cache clean_tox_cache clean_coverage

# -----------------------------------------------------------------------------
# Deploy
# -----------------------------------------------------------------------------

# Builds source and wheel package
dist: clean
  uv build

# # Upload package to pypi test
# twine_upload_test: dist
#    twine upload dist/* -r pypitest
#
# # Package and upload a release
# twine_upload: dist
#    twine upload dist/*
#
# # Twine check
# twine_check: dist
#    twine check dist/*

# -----------------------------------------------------------------------------
# X Studios S3 PyPi
# -----------------------------------------------------------------------------

# Uncomment if you want to enable this:
# # Create latest copy of distro
# create_latest_copy: dist
#    cp dist/*.whl dist/{{package_name}}-latest-py3-none-any.whl

# Push distro to S3 bucket
push_to_s3:
  aws s3 sync --profile={{aws_profile}} --acl public-read ./dist/ s3://{{s3_bucket}}/ \
    --exclude "*" --include "*.whl"
  echo "{{package_url}}"

# Generate secure dependency URL
pyproject_dependency:
  #!/usr/bin/env bash
  sha256=$(openssl sha256 dist/{{wheel_name}} | awk '{print $2}')
  echo "{{package_name}} @ {{package_url}}?sha256=$sha256"


# Build and push to S3 bucket
build_private: dist push_to_s3 pyproject_dependency

# END - Generic commands
# -----------------------------------------------------------------------------
# Project Specific
# -----------------------------------------------------------------------------

# Add your project-specific commands here
{% endraw %}
